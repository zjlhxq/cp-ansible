---
# Custom filters used in this file are defined in filter_plugins/filters.py

confluent_repo_version: 6.0
confluent_package_version: 6.0.3
confluent_full_package_version: "{{ confluent_package_version + '-1' }}"
confluent_package_redhat_suffix: "{{ '-' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"
confluent_package_debian_suffix: "{{ '=' + confluent_full_package_version if confluent_full_package_version != '' else ''}}"

### To copy from Ansible control host or download
jolokia_url_remote: true

### Boolean to enable Jolokia Agent installation and configuration on all components
jolokia_enabled: true

### Full path to download the Jolokia Agent Jar
jolokia_jar_path: /opt/jolokia/jolokia.jar

### Authentication Mode for Jolokia Agent. Possible values: none, basic. If selecting basic, you must set jolokia_user and jolokia_password
jolokia_auth_mode: none

### Username for Jolokia Agent when using Basic Auth
jolokia_user: admin

### Password for Jolokia Agent when using Basic Auth
jolokia_password: nextgen4f$

### To copy from Ansible control host or download
jmxexporter_url_remote: true

### Boolean to enable Prometheus Exporter Agent installation and configuration on all components
#jmxexporter_enabled: false
jmxexporter_enabled: true

### Full path to download the Prometheus Exporter Agent Jar
jmxexporter_jar_path: /opt/prometheus/jmx_prometheus_javaagent.jar

### Boolean to have cp-ansible configure components with FIPS security settings. Must have ssl_enabled: true and use Java 8. Only valid for self signed certs and ssl_custom_certs: true, not ssl_provided_keystore_and_truststore: true.
fips_enabled: false

### Boolean to enable cp-ansible's Custom Log4j Configuration across all components
custom_log4j: true

### Boolean to configure Kerberos krb5.conf file, must also set kerberos.realm, keberos.kdc_hostname, kerberos.admin_hostname, where kerberos is a dictionary
kerberos_configure: true

# TODO document the rest of the kerberos variables, also admin_hostname should default to kdc_hostname

open_file_limit: 500000

### Boolean to install commercially licensed confluent-server instead of community version: confluent-kafka
confluent_server_enabled: false

### Boolean to enable health checks on all components
health_checks_enabled: true

### Boolean to enable health checks on Zookeeper
zookeeper_health_checks_enabled: "{{health_checks_enabled}}"

### Boolean to enable health checks on Kafka
kafka_broker_health_checks_enabled: "{{health_checks_enabled}}"

### Boolean to enable health checks on Schema Registry
schema_registry_health_checks_enabled: "{{health_checks_enabled}}"

### Boolean to enable health checks on Kafka Connect
kafka_connect_health_checks_enabled: "{{health_checks_enabled}}"

### Boolean to enable health checks on Rest Proxy
kafka_rest_health_checks_enabled: "{{health_checks_enabled}}"

### Boolean to enable health checks on ksqlDB
ksql_health_checks_enabled: "{{health_checks_enabled}}"

### Boolean to enable health checks on Control Center
control_center_health_checks_enabled: "{{health_checks_enabled}}"

common_role_completed: false

proxy_env: {}

### Boolean to configure Monitoring Interceptors on ksqlDB, Rest Proxy, and Connect. Defaults to true if Control Center in inventory. Enable if you wish to have monitoring interceptors to report to a centralized monitoring cluster.
monitoring_interceptors_enabled: "{{ 'control_center' in groups }}"

### The method of installation. Valid values are "package" or "archive". If "archive" is selected then services will not be installed via the use of yum or apt, but will instead be installed via expanding the target .tar.gz file from the Confluent archive into the path defined by `archive_destination_path`. Configuration files are also kept in this directory structure instead of `/etc`. SystemD service units are copied from the ardhive for each target service and overrides are created pointing at the new paths. The "package" installation method is the default behavior that utilizes yum/apt.
installation_method: "package"

## <deprecated, should be removed> The Scala version of the Confluent Platform archive to download. Possible values: 2.11, 2.12, etc. If you don't have a specific version requirement then use the default.
confluent_archive_scala_version: 2.12

### The path the downloaded archive is expanded into. Using the default with a `confluent_package_version` of *5.5.1* results in the following installation path `/opt/confluent/confluent-5.5.1/` that contains directories such as `bin` and `share`, but may be overridden usinf the `binary_base_path` property.
archive_destination_path: "/opt/confluent"

### Owner of the downloaded archive. Not mandatory to set.
archive_owner: ""

### Group Owner of the downloaded archive. Not mandatory to set.
archive_group: ""

### If the installation_method is 'archive' then this will be the base path for the configuration files, otherwise configuration files are in the default /etc locations. For example, configuration files may be placed in `/opt/confluent/etc` using this variable.
archive_config_base_path: "{{ archive_destination_path }}"

### Boolean to have cp-ansible download the Confluent CLI
confluent_cli_download_enabled: "{{rbac_enabled or secrets_protection_enabled}}"

### The path the Confluent CLI archive is expanded into.
confluent_cli_base_path: /opt/confluent-cli

### Full path on hosts for Confluent CLI symlink to executable
confluent_cli_path: "/usr/local/bin/confluent"

### Confluent CLI version to download (e.g. "1.9.0"). By default is the latest version
confluent_cli_version: latest

### SASL Mechanism to set on all Kafka Listeners. Configures all components to use that mechanism for authentication. Possible options none, kerberos, plain, scram
sasl_protocol: none

### Boolean to configure components with TLS Encryption. Also manages Java Keystore creation
ssl_enabled: false

### Boolean to enable mTLS Authentication on all components. Configures all components to use mTLS for authentication into Kafka
ssl_mutual_auth_enabled: false

### Boolean to create Keystores with Self Signed Certificates, defaults to true. Alternatively can use ssl_provided_keystore_and_truststore or ssl_custom_certs
self_signed: "{{ false if ssl_provided_keystore_and_truststore|bool or ssl_custom_certs|bool else true }}"

ssl_self_signed_ca_cert_filepath: generated_ssl_files/snakeoil-ca-1.crt
ssl_self_signed_ca_key_filepath: generated_ssl_files/snakeoil-ca-1.key
ssl_self_signed_ca_password: capassword123

### Boolean to have reruns of all.yml regenerate the certificate authority used for self signed certs
regenerate_ca: true

### Boolean to have reruns of all.yml recreate Keystores. Consider disabling this once installation is completed, as this triggers restarts.
regenerate_keystore_and_truststore: true

certs_updated: false

### Boolean for TLS Encryption option to provide own Host Keystores.
ssl_provided_keystore_and_truststore: false

### Full path to host specific keystore on ansible control node. Used with ssl_provided_keystore_and_truststore: true. May set per host, or use inventory_hostname variable eg "/tmp/certs/{{inventory_hostname}}-keystore.jks"
ssl_keystore_filepath: ""

### Keystore Key Password for host specific keystore. Used with ssl_provided_keystore_and_truststore: true. May set per host if keystores have unique passwords
ssl_keystore_key_password: ""

### Keystore Password for host specific keystore. Used with ssl_provided_keystore_and_truststore: true. May set per host if keystores have unique passwords
ssl_keystore_store_password: ""

### Full path to host specific truststore on ansible control node. Used with ssl_provided_keystore_and_truststore: true. Can share same keystore for all components if it contains all ca certs used to sign host certificates
ssl_truststore_filepath: ""

### Keystore Password for host specific truststore. Used with ssl_provided_keystore_and_truststore: true
ssl_truststore_password: ""

### Keystore alias for ca certificate
ssl_truststore_ca_cert_alias: ""

### Boolean for TLS Encryption option to provide own Host Certificates. Must also set ssl_ca_cert_filepath, ssl_signed_cert_filepath, ssl_key_filepath, ssl_key_password
ssl_custom_certs: false

### Full path to CA Certificate Bundle on ansible control node. Used with ssl_custom_certs: true
ssl_ca_cert_filepath: ""

### Full path to host specific signed cert on ansible control node. Used with ssl_custom_certs: true. May set per host, or use inventory_hostname variable eg "/tmp/certs/{{inventory_hostname}}-signed.crt"
ssl_signed_cert_filepath: ""

### Full path to host specific key on ansible control node. Used with ssl_custom_certs: true. May set per host, or use inventory_hostname variable eg "/tmp/certs/{{inventory_hostname}}-key.pem"
ssl_key_filepath: ""

### Password to host specific key. Do not set if key does not require password. Used with ssl_custom_certs: true.
ssl_key_password: ""

### Boolean stating certs and keys are already on hosts. Used with ssl_custom_certs: true.
ssl_custom_certs_remote_src: false


# Zookeeper Variables

### Only use to customize Linux User Zookeeper Service runs with. User must exist on host.
zookeeper_user: "{{zookeeper_default_user}}"

### Only use to customize Linux Group Zookeeper Service user belongs to. Group must exist on host.
zookeeper_group: "{{zookeeper_default_group}}"

### Boolean to configure zookeeper with TLS Encryption. Also manages Java Keystore creation
zookeeper_ssl_enabled: "{{ssl_enabled}}"

### Boolean to enable mTLS Authentication on Zookeeper (Server to Server and Client to Server). Configures kafka to authenticate with mTLS.
zookeeper_ssl_mutual_auth_enabled: "{{ssl_mutual_auth_enabled}}"

### Port for Kafka to Zookeeper connections. NOTE- 2181 will be configured for zk health checks
zookeeper_client_port: "{{'2182' if zookeeper_ssl_enabled|bool else '2181'}}"

### SASL Mechanism for Zookeeper Server to Server and Server to Client Authentication. Options are none, kerberos, digest. Server to server auth only working for digest-md5
zookeeper_sasl_protocol: "{{sasl_protocol if sasl_protocol == 'kerberos' else 'none'}}"

zookeeper_truststore_path: "/var/ssl/private/zookeeper.truststore.jks"
zookeeper_keystore_path: "/var/ssl/private/zookeeper.keystore.jks"
zookeeper_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
zookeeper_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
zookeeper_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else zookeeper_keystore_storepass }}"
zookeeper_ca_cert_path: "/var/ssl/private/ca.crt"
zookeeper_cert_path: "/var/ssl/private/zookeeper.crt"
zookeeper_key_path: "/var/ssl/private/zookeeper.key"
zookeeper_export_certs: "{{zookeeper_ssl_mutual_auth_enabled}}"
zookeeper_keytab_path: /etc/security/keytabs/zookeeper.keytab

zookeeper:
  # TODO deprecate these
  log4j_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper_log4j.properties"
  jaas_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper_jaas.conf"
  # Deprecated way of providing custom properties
  properties: {}

### Boolean to enable Jolokia Agent installation and configuration on zookeeper
zookeeper_jolokia_enabled: "{{jolokia_enabled}}"

### Port to expose jolokia metrics. Beware of port collisions if colocating components on same host
zookeeper_jolokia_port: 7770

### Boolean to enable TLS encryption on Zookeeper jolokia metrics
zookeeper_jolokia_ssl_enabled: "{{ zookeeper_ssl_enabled }}"

### Path on Zookeeper host for Jolokia Configuration file
zookeeper_jolokia_config: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/zookeeper_jolokia.properties"

### Authentication Mode for Zookeeper's Jolokia Agent. Possible values: none, basic. If selecting basic, you must set zookeeper_jolokia_user and zookeeper_jolokia_password
zookeeper_jolokia_auth_mode: "{{jolokia_auth_mode}}"

### Username for Zookeeper's Jolokia Agent when using Basic Auth
zookeeper_jolokia_user: "{{jolokia_user}}"

### Password for Zookeeper's Jolokia Agent when using Basic Auth
zookeeper_jolokia_password: "{{jolokia_password}}"

### Boolean to enable Prometheus Exporter Agent installation and configuration on zookeeper
zookeeper_jmxexporter_enabled: "{{jmxexporter_enabled}}"

### Port to expose prometheus metrics. Beware of port collisions if colocating components on same host
zookeeper_jmxexporter_port: 8079

zookeeper_jmxexporter_config_path: /opt/prometheus/zookeeper.yml

zookeeper_health_check_command: "exec 42<>/dev/tcp/127.0.0.1/{{zookeeper_final_properties.clientPort}}; echo -e 'srvr' >&42; cat <&42"

zookeeper_current_node_hostname: "{{ inventory_hostname }}"

### Zookeeper peer port
zookeeper_peer_port: 2888

### Zookeeper leader port
zookeeper_leader_port: 3888

### Use to copy files from control node to zookeeper hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
zookeeper_copy_files: []

# User provided properties, merged into the final properties dictionary with precedence
### Use to set custom zookeeper properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- zookeeper.properties is deprecated.
zookeeper_custom_properties: "{{ zookeeper.properties }}"


#### Kafka Broker Variables ####
kafka_broker_default_listeners:
  internal:
    name: INTERNAL
    port: 9092
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ 'OAUTH' if rbac_enabled|bool else sasl_protocol }}"

kafka_broker_custom_listeners:
  broker:
    name: BROKER
    port: 9091
    ssl_enabled: "{{ ssl_enabled }}"
    ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"
    sasl_protocol: "{{ sasl_protocol }}"

# Deprecated variable
kafka_broker_configure_additional_brokers: true

### Boolean to configure more than one kafka listener. Defaults to true. NOTE- kafka_broker_configure_additional_brokers is deprecated
kafka_broker_configure_multiple_listeners: "{{kafka_broker_configure_additional_brokers}}"

kafka_broker_listeners: "{{ kafka_broker_default_listeners | combine(kafka_broker_custom_listeners, recursive=True) if kafka_broker_configure_multiple_listeners|bool else  kafka_broker_default_listeners}}"
kafka_broker_inter_broker_listener_name: "{{ 'broker' if kafka_broker_configure_multiple_listeners|bool else 'internal' }}"

# TODO move this var into vars
# Uses custom filter to create a list of all sasl_protocols, removes ['none'], and reduces to unique items
kafka_broker_sasl_enabled_mechanisms: "{{ kafka_broker_listeners | get_sasl_mechanisms(sasl_protocol) | difference(['none']) | unique }}"

### Only use to customize Linux User Kafka Service runs with. User must exist on host.
kafka_broker_user: "{{kafka_broker_default_user}}"

### Only use to customize Linux Group Kafka Service user belongs to. Group must exist on host.
kafka_broker_group: "{{kafka_broker_default_group}}"

kafka_broker_truststore_path: "{{kafka_broker_bcfks_truststore_path if fips_enabled|bool else kafka_broker_pkcs12_truststore_path}}"
kafka_broker_keystore_path: "{{kafka_broker_bcfks_keystore_path if fips_enabled|bool else kafka_broker_pkcs12_keystore_path}}"

kafka_broker_bcfks_truststore_path: "/var/ssl/private/kafka_broker.truststore.bcfks"
kafka_broker_bcfks_keystore_path: "/var/ssl/private/kafka_broker.keystore.bcfks"

kafka_broker_pkcs12_truststore_path: "/var/ssl/private/kafka_broker.truststore.jks"
kafka_broker_pkcs12_keystore_path: "/var/ssl/private/kafka_broker.keystore.jks"

kafka_broker_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_broker_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_broker_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_broker_keystore_storepass }}"
kafka_broker_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_broker_cert_path: "/var/ssl/private/kafka_broker.crt"
kafka_broker_key_path: "/var/ssl/private/kafka_broker.key"
kafka_broker_export_certs: "{{ssl_mutual_auth_enabled}}"
kafka_broker_keytab_path: /etc/security/keytabs/kafka_broker.keytab

kafka_broker:
  # TODO deprecate these variables
  log4j_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_server_log4j.properties"
  jaas_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_server_jaas.conf"
  # Deprecated way of providing custom properties
  properties: {}
  # Deprecated way of setting kafkas log.dirs property
  datadir:
    - /kafka/data

### Boolean to configure Schema Validation on Kafka
kafka_broker_schema_validation_enabled: true

### Boolean to enable Jolokia Agent installation and configuration on kafka
kafka_broker_jolokia_enabled: "{{jolokia_enabled}}"

### Port to expose kafka jolokia metrics. Beware of port collisions if colocating components on same host
kafka_broker_jolokia_port: 7771

### Boolean to enable TLS encryption on Kafka jolokia metrics
kafka_broker_jolokia_ssl_enabled: "{{ ssl_enabled }}"

### Path on Kafka host for Jolokia Configuration file
kafka_broker_jolokia_config: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_jolokia.properties"

### Authentication Mode for Kafka's Jolokia Agent. Possible values: none, basic. If selecting basic, you must set kafka_broker_jolokia_user and kafka_broker_jolokia_password
kafka_broker_jolokia_auth_mode: "{{jolokia_auth_mode}}"

### Username for Kafka's Jolokia Agent when using Basic Auth
kafka_broker_jolokia_user: "{{jolokia_user}}"

### Password for Kafka's Jolokia Agent when using Basic Auth
kafka_broker_jolokia_password: "{{jolokia_password}}"

# TODO move these to vars, should not be customizable, do they even belong w the shared vars
kafka_broker_jolokia_java_arg_ssl_addon: ",keystore={{kafka_broker_keystore_path}},keystorePassword={{kafka_broker_keystore_storepass}},protocol=https"
kafka_broker_jolokia_urp_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions"
kafka_broker_jolokia_active_controller_url: "{{ 'https' if kafka_broker_jolokia_ssl_enabled|bool else 'http' }}://{{inventory_hostname}}:{{kafka_broker_jolokia_port}}/jolokia/read/kafka.controller:type=KafkaController,name=ActiveControllerCount"
kafka_broker_erp_clusters_url: "{{mds_http_protocol}}://{{ mds_advertised_listener_hostname | default(inventory_hostname) }}:{{mds_port}}/kafka/v3/clusters"

### Boolean to enable Prometheus Exporter Agent installation and configuration on kafka
kafka_broker_jmxexporter_enabled: "{{jmxexporter_enabled}}"

### Port to expose prometheus metrics. Beware of port collisions if colocating components on same host
kafka_broker_jmxexporter_port: 8080

kafka_broker_jmxexporter_config_path: /opt/prometheus/kafka.yml

### Use to copy files from control node to kafka hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
kafka_broker_copy_files: []

### Replication Factor for internal topics. Defaults to the minimum of the number of brokers and 3
kafka_broker_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

### Boolean to enable the kafka's metrics reporter. Defaults to true if Control Center in inventory. Enable if you wish to have metrics reported to a centralized monitoring cluster.
kafka_broker_metrics_reporter_enabled: "{{ 'control_center' in groups }}"

### Use to set custom kafka properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- kafka_broker.properties is deprecated.
kafka_broker_custom_properties: "{{ kafka_broker.properties }}"

### Boolean to enable the embedded rest proxy within Kafka. NOTE- Embedded Rest Proxy must be enabled if RBAC is enabled and Confluent Server must be enabled
kafka_broker_rest_proxy_enabled: "{{confluent_server_enabled}}"

#### Schema Registry Variables ####

### Only use to customize Linux User Schema Registry Service runs with. User must exist on host.
schema_registry_user: "{{schema_registry_default_user}}"
### Only use to customize Linux Group Schema Registry Service user belongs to. Group must exist on host.
schema_registry_group: "{{schema_registry_default_group}}"

### Port Schema Registry API exposed over
schema_registry_listener_port: 8081

### Boolean to configure schema registry with TLS Encryption. Also manages Java Keystore creation
schema_registry_ssl_enabled: "{{ssl_enabled}}"

### Boolean to enable mTLS Authentication on Schema Registry
schema_registry_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"

schema_registry_truststore_path: "/var/ssl/private/schema_registry.truststore.jks"
schema_registry_keystore_path: "/var/ssl/private/schema_registry.keystore.jks"
schema_registry_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
schema_registry_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
schema_registry_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else schema_registry_keystore_storepass }}"
schema_registry_ca_cert_path: "/var/ssl/private/ca.crt"
schema_registry_cert_path: "/var/ssl/private/schema_registry.crt"
schema_registry_key_path: "/var/ssl/private/schema_registry.key"
schema_registry_export_certs: "{{schema_registry_ssl_mutual_auth_enabled}}"
schema_registry_keytab_path: /etc/security/keytabs/schema_registry.keytab
schema_registry_kafka_listener_name: internal
schema_registry:
  log4j_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/schema-registry/schema_registry_log4j.properties"
  # Deprecated way of providing custom properties
  properties: {}

### Boolean to enable Jolokia Agent installation and configuration on schema registry
schema_registry_jolokia_enabled: "{{jolokia_enabled}}"

### Port to expose schema registry jolokia metrics. Beware of port collisions if colocating components on same host
schema_registry_jolokia_port: 7772

### Boolean to enable TLS encryption on Schema Registry jolokia metrics
schema_registry_jolokia_ssl_enabled: "{{ schema_registry_ssl_enabled }}"

### Path on Schema Registry host for Jolokia Configuration file
schema_registry_jolokia_config: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/schema-registry/schema_registry_jolokia.properties"

### Authentication Mode for Schema Registry's Jolokia Agent. Possible values: none, basic. If selecting basic, you must set schema_registry_jolokia_user and schema_registry_jolokia_password
schema_registry_jolokia_auth_mode: "{{jolokia_auth_mode}}"

### Username for Schema Registry's Jolokia Agent when using Basic Auth
schema_registry_jolokia_user: "{{jolokia_user}}"

### Password for Schema Registry's Jolokia Agent when using Basic Auth
schema_registry_jolokia_password: "{{jolokia_password}}"

### Boolean to enable Prometheus Exporter Agent installation and configuration on schema registry
schema_registry_jmxexporter_enabled: "{{jmxexporter_enabled}}"

schema_registry_jmxexporter_config_path: /opt/prometheus/schema_registry.yml

### Port to expose prometheus metrics. Beware of port collisions if colocating components on same host
schema_registry_jmxexporter_port: 8078

### Use to copy files from control node to schema registry hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
schema_registry_copy_files: []

### Use to set custom schema registry properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- kafka_broker.properties is deprecated.
schema_registry_custom_properties: "{{ schema_registry.properties }}"


#### Kafka Rest Variables ####

### Only use to customize Linux User Rest Proxy Service runs with. User must exist on host.
kafka_rest_user: "{{kafka_rest_default_user}}"

### Only use to customize Linux Group Rest Proxy Service user belongs to. Group must exist on host.
kafka_rest_group: "{{kafka_rest_default_group}}"

### Port Rest Proxy API exposed over
kafka_rest_port: 8082

### Boolean to configure Rest Proxy with TLS Encryption. Also manages Java Keystore creation
kafka_rest_ssl_enabled: "{{ssl_enabled}}"

### Boolean to enable mTLS Authentication on Rest Proxy
kafka_rest_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"

kafka_rest_truststore_path: "/var/ssl/private/kafka_rest.truststore.jks"
kafka_rest_keystore_path: "/var/ssl/private/kafka_rest.keystore.jks"
kafka_rest_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_rest_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_rest_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_rest_keystore_storepass }}"
kafka_rest_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_rest_cert_path: "/var/ssl/private/kafka_rest.crt"
kafka_rest_key_path: "/var/ssl/private/kafka_rest.key"
kafka_rest_export_certs: "{{kafka_rest_ssl_mutual_auth_enabled}}"
kafka_rest_keytab_path: /etc/security/keytabs/kafka_rest.keytab
kafka_rest_kafka_listener_name: internal
kafka_rest:
  log4j_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-rest/kafka-rest_log4j.properties"
  # Deprecated way of providing custom properties
  properties: {}

### Boolean to enable Jolokia Agent installation and configuration on Rest Proxy
kafka_rest_jolokia_enabled: "{{jolokia_enabled}}"

### Port to expose Rest Proxy jolokia metrics. Beware of port collisions if colocating components on same host
kafka_rest_jolokia_port: 7775

### Boolean to enable TLS encryption on Rest Proxy jolokia metrics
kafka_rest_jolokia_ssl_enabled: "{{ kafka_rest_ssl_enabled }}"

### Path on Rest Proxy host for Jolokia Configuration file
kafka_rest_jolokia_config: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka-rest/kafka_rest_jolokia.properties"

### Authentication Mode for Rest Proxy's Jolokia Agent. Possible values: none, basic. If selecting basic, you must set schema_registry_jolokia_user and schema_registry_jolokia_password
kafka_rest_jolokia_auth_mode: "{{jolokia_auth_mode}}"

### Username for Rest Proxy's Jolokia Agent when using Basic Auth
kafka_rest_jolokia_user: "{{jolokia_user}}"

### Password for Rest Proxy's Jolokia Agent when using Basic Auth
kafka_rest_jolokia_password: "{{jolokia_password}}"

### Boolean to enable Prometheus Exporter Agent installation and configuration on Rest Proxy
kafka_rest_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_rest_jmxexporter_config_path: /opt/prometheus/kafka_rest.yml

### Port to expose prometheus metrics. Beware of port collisions if colocating components on same host
kafka_rest_jmxexporter_port: 8075

### Use to copy files from control node to schema registry hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
kafka_rest_copy_files: []

### Use to set custom Rest Proxy properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- kafka_rest.properties is deprecated.
kafka_rest_custom_properties: "{{ kafka_rest.properties }}"

### Boolean to configure Monitoring Interceptors on Rest Proxy.
kafka_rest_monitoring_interceptors_enabled: "{{ monitoring_interceptors_enabled }}"


# Kafka Connect Variables

### Only use to customize Linux User Connect Service runs with. User must exist on host.
kafka_connect_user: "{{kafka_connect_default_user}}"

### Only use to customize Linux Group Connect Service user belongs to. Group must exist on host.
kafka_connect_group: "{{kafka_connect_default_group}}"

### Port Connect API exposed over
kafka_connect_rest_port: 8083

### Boolean to configure Connect with TLS Encryption. Also manages Java Keystore creation
kafka_connect_ssl_enabled: "{{ssl_enabled}}"

### Boolean to enable mTLS Authentication on Connect
kafka_connect_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"

kafka_connect_truststore_path: "/var/ssl/private/kafka_connect.truststore.jks"
kafka_connect_keystore_path: "/var/ssl/private/kafka_connect.keystore.jks"
kafka_connect_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
kafka_connect_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
kafka_connect_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else kafka_connect_keystore_storepass }}"
kafka_connect_ca_cert_path: "/var/ssl/private/ca.crt"
kafka_connect_cert_path: "/var/ssl/private/kafka_connect.crt"
kafka_connect_key_path: "/var/ssl/private/kafka_connect.key"
kafka_connect_export_certs: "{{kafka_connect_ssl_mutual_auth_enabled}}"
kafka_connect_keytab_path: /etc/security/keytabs/kafka_connect.keytab
kafka_connect_kafka_listener_name: internal

### Additional set of Connect extension classes.
kafka_connect_custom_rest_extension_classes: []

kafka_connect:
  log4j_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/connect_distributed_log4j.properties"
  # Deprecated way of providing custom properties
  properties: {}

### Boolean to enable Jolokia Agent installation and configuration on Connect
kafka_connect_jolokia_enabled: "{{jolokia_enabled}}"

### Port to expose Connect jolokia metrics. Beware of port collisions if colocating components on same host
kafka_connect_jolokia_port: 7773

### Boolean to enable TLS encryption on Connect jolokia metrics
kafka_connect_jolokia_ssl_enabled: "{{ kafka_connect_ssl_enabled }}"

### Path on Connect host for Jolokia Configuration file
kafka_connect_jolokia_config: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/kafka/kafka_connect_jolokia.properties"

### Authentication Mode for Connect's Jolokia Agent. Possible values: none, basic. If selecting basic, you must set schema_registry_jolokia_user and schema_registry_jolokia_password
kafka_connect_jolokia_auth_mode: "{{jolokia_auth_mode}}"

### Username for Connect's Jolokia Agent when using Basic Auth
kafka_connect_jolokia_user: "{{jolokia_user}}"

### Password for Connect's Jolokia Agent when using Basic Auth
kafka_connect_jolokia_password: "{{jolokia_password}}"

### Boolean to enable Prometheus Exporter Agent installation and configuration on Connect
kafka_connect_jmxexporter_enabled: "{{jmxexporter_enabled}}"
kafka_connect_jmxexporter_config_path: /opt/prometheus/kafka_connect.yml

### Port to expose connect prometheus metrics. Beware of port collisions if colocating components on same host
kafka_connect_jmxexporter_port: 8077

### Use to copy files from control node to connect hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
kafka_connect_copy_files: []

### Connect Service Group Id. Customize when configuring multiple connect clusters in same inventory
kafka_connect_group_id: connect-cluster

### Replication Factor for connect internal topics. Defaults to the minimum of the number of brokers and 3
kafka_connect_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

### Boolean to enable and configure Connect Secret Registry
kafka_connect_secret_registry_enabled: "{{rbac_enabled}}"

### Connect Secret Registry Key
kafka_connect_secret_registry_key: 39ff95832750c0090d84ddf5344583832efe91ef

kafka_connect_plugins_path:
  - "{% if installation_method == 'archive' %}{{archive_destination_path}}/confluent-{{confluent_package_version}}/{% else %}/usr/{% endif %}share/java"


kafka_connect_confluent_hub_plugins: []
kafka_connect_confluent_hub_plugins_dest: /usr/share/java
kafka_connect_plugins: []
kafka_connect_plugins_remote: []
kafka_connect_plugins_dest: /usr/share/java

### Use to set custom Connect properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- kafka_connect.properties is deprecated.
kafka_connect_custom_properties: "{{ kafka_connect.properties }}"

### Boolean to configure Monitoring Interceptors on Connect.
kafka_connect_monitoring_interceptors_enabled: "{{ monitoring_interceptors_enabled }}"


#### KSQLDB Variables ####

### Only use to customize Linux User ksqlDB Service runs with. User must exist on host.
ksql_user: "{{ksql_default_user}}"

### Only use to customize Linux Group ksqlDB Service user belongs to. Group must exist on host.
ksql_group: "{{ksql_default_group}}"

### Port ksqlDB API exposed over
ksql_listener_port: 8088

### Boolean to configure ksqlDB with TLS Encryption. Also manages Java Keystore creation
ksql_ssl_enabled: "{{ssl_enabled}}"

### Boolean to enable mTLS Authentication on ksqlDB
ksql_ssl_mutual_auth_enabled: "{{ ssl_mutual_auth_enabled }}"

ksql_truststore_path: "/var/ssl/private/ksql.truststore.jks"
ksql_keystore_path: "/var/ssl/private/ksql.keystore.jks"
ksql_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
ksql_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
ksql_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else ksql_keystore_storepass }}"
ksql_ca_cert_path: "/var/ssl/private/ca.crt"
ksql_cert_path: "/var/ssl/private/ksql.crt"
ksql_key_path: "/var/ssl/private/ksql.key"
ksql_export_certs: "{{ksql_ssl_mutual_auth_enabled}}"
ksql_keytab_path: /etc/security/keytabs/ksql.keytab
ksql_kafka_listener_name: internal
ksql_processing_log_kafka_listener_name: "{{kafka_broker_inter_broker_listener_name if rbac_enabled else ksql_kafka_listener_name}}"
ksql:
  log4j_file: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server_log4j.properties' , '/etc/ksql/ksql-server_log4j.properties')}}"
  jaas_file: "{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql-server_jaas.conf' , '/etc/ksql/ksql-server_jaas.conf')}}"
  properties: {}

### Boolean to enable Jolokia Agent installation and configuration on ksqlDB
ksql_jolokia_enabled: "{{jolokia_enabled}}"

### Port to expose ksqlDB jolokia metrics. Beware of port collisions if colocating components on same host
ksql_jolokia_port: 7774

### Boolean to enable TLS encryption on ksqlDB jolokia metrics
ksql_jolokia_ssl_enabled: "{{ ksql_ssl_enabled }}"

### Path on ksqlDB host for Jolokia Configuration file
ksql_jolokia_config: "{{ archive_config_base_path if installation_method == 'archive' else '' }}{{(confluent_package_version is version('5.5.0', '>=')) | ternary('/etc/ksqldb/ksql_jolokia.properties' , '/etc/ksql/ksql_jolokia.properties')}}"

### Authentication Mode for ksqlDB's Jolokia Agent. Possible values: none, basic. If selecting basic, you must set schema_registry_jolokia_user and schema_registry_jolokia_password
ksql_jolokia_auth_mode: "{{jolokia_auth_mode}}"

### Username for ksqlDB's Jolokia Agent when using Basic Auth
ksql_jolokia_user: "{{jolokia_user}}"

### Password for ksqlDB's Jolokia Agent when using Basic Auth
ksql_jolokia_password: "{{jolokia_password}}"

### Boolean to enable Prometheus Exporter Agent installation and configuration on ksqlDB
ksql_jmxexporter_enabled: "{{jmxexporter_enabled}}"
ksql_jmxexporter_config_path: /opt/prometheus/ksql.yml

### Port to expose ksqlDB prometheus metrics. Beware of port collisions if colocating components on same host
ksql_jmxexporter_port: 8076

### Use to copy files from control node to ksqlDB hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
ksql_copy_files: []

### Replication Factor for ksqlDB internal topics. Defaults to the minimum of the number of brokers and 3
ksql_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

### ksqlDB Service ID. Use when configuring multiple ksqldb clusters in the same inventory file.
ksql_service_id: default_

### Use to set custom ksqlDB properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- ksql.properties is deprecated.
ksql_custom_properties: "{{ ksql.properties }}"

### Boolean to configure Monitoring Interceptors on ksqlDB.
ksql_monitoring_interceptors_enabled: "{{ monitoring_interceptors_enabled }}"

ksql_processing_log: "processing_log"

### Boolean to enable ksqlDB Log Streaming.
ksql_log_streaming_enabled: false


# Control Center Variables

### Only use to customize Linux User Control Center Service runs with. User must exist on host.
control_center_user: "{{control_center_default_user}}"

### Only use to customize Linux Group Control Center Service user belongs to. Group must exist on host.
control_center_group: "{{control_center_default_group}}"

### Port Control Center exposed over
control_center_port: 9021

### Interface on host for Control Center to listen on
control_center_listener_hostname: "0.0.0.0"

### Boolean to configure Control Center with TLS Encryption. Also manages Java Keystore creation
control_center_ssl_enabled: "{{ssl_enabled}}"

control_center_truststore_path: "/var/ssl/private/control_center.truststore.jks"
control_center_keystore_path: "/var/ssl/private/control_center.keystore.jks"
control_center_truststore_storepass: "{{ ssl_truststore_password if ssl_provided_keystore_and_truststore|bool else 'confluenttruststorepass'}}"
control_center_keystore_storepass: "{{ ssl_keystore_store_password if ssl_provided_keystore_and_truststore|bool else 'confluentkeystorestorepass'}}"
control_center_keystore_keypass: "{{ ssl_keystore_key_password if ssl_provided_keystore_and_truststore|bool else control_center_keystore_storepass }}"
control_center_ca_cert_path: "/var/ssl/private/ca.crt"
control_center_cert_path: "/var/ssl/private/control_center.crt"
control_center_key_path: "/var/ssl/private/control_center.key"
control_center_export_certs: "{{ssl_mutual_auth_enabled}}"
control_center_keytab_path: /etc/security/keytabs/control_center.keytab
control_center_kafka_listener_name: internal
control_center:
  log4j_file: "{{ archive_config_base_path if installation_method == 'archive' else '' }}/etc/confluent-control-center/control-center_log4j.properties"
  # Deprecated way of providing custom properties
  properties: {}

### Use to copy files from control node to Control Center hosts. Set to list of dictionaries with keys: source_path (full path of file on control node) and destination_path (full path to copy file to). Optionally specify directory_mode (default: '0750') and file_mode (default: '0640') to set directory and file permissions.
control_center_copy_files: []

### Replication Factor for Control Center internal topics. Defaults to the minimum of the number of brokers and 3
control_center_default_internal_replication_factor: "{{ [ groups['kafka_broker'] | default(['localhost']) | length, 3 ] | min }}"

### Use to set custom Control Center properties. This variable is a dictionary. Put values true/false in quotation marks to perserve case. NOTE- control_center.properties is deprecated.
control_center_custom_properties: "{{ control_center.properties }}"

sasl_scram_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

sasl_plain_users:
  admin:
    principal: admin
    password: admin-secret
  client:
    principal: client
    password: client-secret
  kafka_connect:
    principal: kafka_connect
    password: kafka_connect-secret
  control_center:
    principal: control_center
    password: control_center-secret
  kafka_rest:
    principal: kafka_rest
    password: kafka_rest-secret
  ksql:
    principal: ksql
    password: ksql-secret
  schema_registry:
    principal: schema_registry
    password: schema_registry-secret

zookeeper_digest_users:
  admin:
    principal: admin
    password: admin-secret
  kafka_broker:
    principal: kafka_broker
    password: kafka_broker-secret


### Boolean to configure Confluent Platform with RBAC enabled. Creates Rolebindings for all components to function
rbac_enabled: false

### Port to expose MDS Server API on
mds_port: 8090

# Deprecated
mds_ssl_enabled: "{{ssl_enabled}}"

### Boolean to configure TLS encryption on the Broker Rest endpoint. NOTE- mds_ssl_enabled is now deprecated
kafka_broker_rest_ssl_enabled: "{{mds_ssl_enabled}}"

mds_acls_enabled: "{{rbac_enabled}}"
rbac_enabled_public_pem_path: /var/ssl/private/public.pem
rbac_enabled_private_pem_path: /var/ssl/private/tokenKeypair.pem

### LDAP User which will be granted super user permissions to create role bindings in the MDS
mds_super_user: mds

### Password to mds_super_user LDAP User
mds_super_user_password: password

### LDAP User for Kafkas Embedded Rest Service to authenticate as
kafka_broker_ldap_user: "{{mds_super_user}}"

### Password to kafka_broker_ldap_user LDAP User
kafka_broker_ldap_password: "{{mds_super_user_password}}"

### LDAP User for Schema Registry to authenticate as
schema_registry_ldap_user: schema-registry

### Password to schema_registry_ldap_user LDAP User
schema_registry_ldap_password: password

### LDAP User for Connect to authenticate as
kafka_connect_ldap_user: connect

### Password to kafka_connect_ldap_user LDAP User
kafka_connect_ldap_password: password

### LDAP User for ksqlDB to authenticate as
ksql_ldap_user: ksql

### Password to ksql_ldap_user LDAP User
ksql_ldap_password: password

### LDAP User for Rest Proxy to authenticate as
kafka_rest_ldap_user: kafka-rest

### Password to kafka_rest_ldap_user LDAP User
kafka_rest_ldap_password: password

### LDAP User for Control Center to authenticate as
control_center_ldap_user: control-center

### Password to control_center_ldap_user LDAP User
control_center_ldap_password: password

### Boolean to describe if kafka group should be configured with an External MDS Kafka Cluster. If set to true, you must also set mds_broker_bootstrap_servers, mds_broker_listener, kafka_broker_rest_ssl_enabled
external_mds_enabled: false

### Kafka hosts and listener ports on the Kafka Cluster acting as an external MDS Server. mds_broker_listener dictionary must describe its security settings. Must be configured if external_mds_enabled: true
mds_broker_bootstrap_servers: localhost:9092

### Listener Dictionary that describes how kafka clusters connect to MDS Kafka cluster. Make sure it contains the keys: ssl_enabled, ssl_mutual_auth_enabled, sasl_protocol
mds_broker_listener:
  ssl_enabled: "{{ssl_enabled}}"
  ssl_mutual_auth_enabled: "{{ssl_mutual_auth_enabled}}"
  sasl_protocol: "{{sasl_protocol}}"

### Comma separated urls for mds servers. Only set if external_mds_enabled: true
mds_bootstrap_server_urls: "{{mds_http_protocol}}://{{ groups['kafka_broker'] | default(['localhost']) | join(':' + mds_port|string + ',' + mds_http_protocol + '://') }}:{{mds_port}}"

create_mds_certs: "{{ rbac_enabled }}"
token_services_public_pem_file: generated_ssl_files/public.pem
token_services_private_pem_file: generated_ssl_files/tokenKeypair.pem

### List of users to be granted system admin Role Bindings across all components
rbac_component_additional_system_admins: []

### List of users to be granted system admin Role Bindings on the Kafka Cluster
kafka_broker_additional_system_admins: "{{rbac_component_additional_system_admins}}"

### List of users to be granted system admin Role Bindings on the Schema Registry Cluster
schema_registry_additional_system_admins: "{{rbac_component_additional_system_admins}}"

### List of users to be granted system admin Role Bindings on the ksqlDB Cluster
ksql_additional_system_admins: "{{rbac_component_additional_system_admins}}"

### List of users to be granted system admin Role Bindings on the Connect Cluster
kafka_connect_additional_system_admins: "{{rbac_component_additional_system_admins}}"

# TODO Investigate proper rolebinding for c3 system admins
### List of users to be granted system admin Role Bindings on the Control Center Cluster
control_center_additional_system_admins: "{{rbac_component_additional_system_admins}}"

# Secrets Protection Variables

### Boolean to enable secrets protection on all components except Zookeeper
secrets_protection_enabled: false

### Boolean to Recreate Secrets File and Masterkey. Only set to false AFTER first cp-ansible run.
regenerate_masterkey: true

### Masterkey generated by the Confluent Secret CLI. If empty and secrets protection is enabled, then a master key will be randomly generated.
secrets_protection_masterkey: ""

### Security file generated by the Confluent Secret CLI. If empty and secrets protection is enabled, then a security file will be randomly generated.
secrets_protection_security_file: generated_ssl_files/security.properties

### Boolean to enable secrets protection in Kafka broker.
kafka_broker_secrets_protection_enabled: "{{secrets_protection_enabled}}"

### Boolean to encrypt all properties containing 'password' for Kafka.
kafka_broker_secrets_protection_encrypt_passwords: "{{kafka_broker_secrets_protection_enabled}}"

### List of Kafka properties to encrypt. Can be used in addition to kafka_broker_secrets_protection_encrypt_passwords.
kafka_broker_secrets_protection_encrypt_properties: []

### Boolean to enable secrets protection in schema registry.
schema_registry_secrets_protection_enabled: "{{secrets_protection_enabled}}"

### Boolean to encrypt all properties containing 'password' for Schema Registry.
schema_registry_secrets_protection_encrypt_passwords: "{{schema_registry_secrets_protection_enabled}}"

### List of Schema Registry properties to encrypt. Can be used in addition to schema_registry_secrets_protection_encrypt_passwords.
schema_registry_secrets_protection_encrypt_properties: []

### Boolean to enable secrets protection in Connect.
kafka_connect_secrets_protection_enabled: "{{secrets_protection_enabled}}"

### Boolean to encrypt all properties containing 'password' for Connect.
kafka_connect_secrets_protection_encrypt_passwords: "{{kafka_connect_secrets_protection_enabled}}"

### List of Connect properties to encrypt. Can be used in addition to kafka_connect_secrets_protection_encrypt_passwords.
kafka_connect_secrets_protection_encrypt_properties: []

### Boolean to enable secrets protection in Rest Proxy.
kafka_rest_secrets_protection_enabled: "{{secrets_protection_enabled}}"

### Boolean to encrypt all properties containing 'password' for Rest Proxy.
kafka_rest_secrets_protection_encrypt_passwords: "{{kafka_rest_secrets_protection_enabled}}"

### List of Rest Proxy properties to encrypt. Can be used in addition to kafka_rest_secrets_protection_encrypt_passwords.
kafka_rest_secrets_protection_encrypt_properties: []

### Boolean to enable secrets protection in KSQL.
ksql_secrets_protection_enabled: "{{secrets_protection_enabled}}"

### Boolean to encrypt all properties containing 'password' for KSQL.
ksql_secrets_protection_encrypt_passwords: "{{ksql_secrets_protection_enabled}}"

### List of KSQL properties to encrypt. Can be used in addition to ksql_secrets_protection_encrypt_passwords.
ksql_secrets_protection_encrypt_properties: []

### Boolean to enable secrets protection in Control Center.
control_center_secrets_protection_enabled: "{{secrets_protection_enabled}}"

### Boolean to encrypt all properties containing 'password' for Control Center.
control_center_secrets_protection_encrypt_passwords: "{{control_center_secrets_protection_enabled}}"

### List of Control Center properties to encrypt. Can be used in addition to control_center_secrets_protection_encrypt_passwords.
control_center_secrets_protection_encrypt_properties: []

# Telemetry Variables

### Boolean to configure Telemetry. Must also set telemetry_api_key and telemetry_api_secret
telemetry_enabled: false

### API Key used by Telemetry. Mandatory variable for Telemetry
telemetry_api_key: ""

### API Secret used by Telemetry. Mandatory variable for Telemetry
telemetry_api_secret: ""

### Proxy URL used by Telemetry. Only set if using a Proxy Server
telemetry_proxy_url: ""

### Username for Proxy Server used by Telemetry. Only set if Proxy Server requires authentication
telemetry_proxy_username: ""

### Password for Proxy Server used by Telemetry. Only set if Proxy Server requires authentication
telemetry_proxy_password: ""

### Boolean to configure Telemetry on Kafka. Must also set telemetry_api_key and telemetry_api_secret
kafka_broker_telemetry_enabled: "{{telemetry_enabled}}"

### Boolean to send cp-ansible Telemetry Metrics from Kafka. Currently only sends cp-ansible version data
kafka_broker_telemetry_ansible_labels_enabled: "{{kafka_broker_telemetry_enabled}}"

### Boolean to configure Telemetry on Schema Registry. Must also set telemetry_api_key and telemetry_api_secret
schema_registry_telemetry_enabled: "{{telemetry_enabled}}"

### Boolean to send cp-ansible Telemetry Metrics from Schema Registry. Currently only sends cp-ansible version data
schema_registry_telemetry_ansible_labels_enabled: "{{schema_registry_telemetry_enabled}}"

### Boolean to configure Telemetry on Connect. Must also set telemetry_api_key and telemetry_api_secret
kafka_connect_telemetry_enabled: "{{telemetry_enabled}}"

### Boolean to send cp-ansible Telemetry Metrics from Connect. Currently only sends cp-ansible version data
kafka_connect_telemetry_ansible_labels_enabled: "{{kafka_connect_telemetry_enabled}}"

### Boolean to configure Telemetry on Rest Proxy. Must also set telemetry_api_key and telemetry_api_secret
kafka_rest_telemetry_enabled: "{{telemetry_enabled}}"

### Boolean to send cp-ansible Telemetry Metrics from Rest Proxy. Currently only sends cp-ansible version data
kafka_rest_telemetry_ansible_labels_enabled: "{{kafka_rest_telemetry_enabled}}"

### Boolean to configure Telemetry on ksqlDB. Must also set telemetry_api_key and telemetry_api_secret
ksql_telemetry_enabled: "{{telemetry_enabled}}"

### Boolean to send cp-ansible Telemetry Metrics from ksqlDB. Currently only sends cp-ansible version data
ksql_telemetry_ansible_labels_enabled: "{{ksql_telemetry_enabled}}"

### Boolean to configure Telemetry on Control Center. Must also set telemetry_api_key and telemetry_api_secret
control_center_telemetry_enabled: "{{telemetry_enabled}}"

### Boolean to send cp-ansible Telemetry Metrics from Control Center. Currently only sends cp-ansible version data
control_center_telemetry_ansible_labels_enabled: "{{control_center_telemetry_enabled}}"

### User for authenticated MDS Health Check. Only relevant if rbac_enabled: true.
mds_health_check_user: "{{mds_super_user}}"

### Password for authenticated MDS Health Check. Only relevant if rbac_enabled: true.
mds_health_check_password: "{{mds_super_user_password}}"

### User for authenticated Kafka Admin API Health Check. Set if using customized security like Basic Auth.
kafka_broker_rest_health_check_user: "{{mds_super_user}}"

### Password for authenticated Kafka Admin API Health Check. Set if using customized security like Basic Auth.
kafka_broker_rest_health_check_password: "{{mds_super_user_password}}"

### User for authenticated Schema Registry Health Check. Set if using customized security like Basic Auth.
schema_registry_health_check_user: "{{schema_registry_ldap_user}}"

### Password for authenticated Schema Registry Health Check. Set if using customized security like Basic Auth.
schema_registry_health_check_password: "{{schema_registry_ldap_password}}"

### User for authenticated Connect Health Check. Set if using customized security like Basic Auth.
kafka_connect_health_check_user: "{{kafka_connect_ldap_user}}"

### Password for authenticated Connect Health Check. Set if using customized security like Basic Auth.
kafka_connect_health_check_password: "{{kafka_connect_ldap_password}}"

### User for authenticated ksqlDB Health Check. Set if using customized security like Basic Auth.
ksql_health_check_user: "{{ksql_ldap_user}}"

### Password for authenticated ksqlDB Health Check. Set if using customized security like Basic Auth.
ksql_health_check_password: "{{ksql_ldap_password}}"

### User for authenticated Rest Proxy Health Check. Set if using customized security like Basic Auth.
kafka_rest_health_check_user: "{{kafka_rest_ldap_user}}"

### Password for authenticated Rest Proxy Health Check. Set if using customized security like Basic Auth.
kafka_rest_health_check_password: "{{kafka_rest_ldap_password}}"

### User for authenticated Control Center Health Check. Set if using customized security like Basic Auth.
control_center_health_check_user: "{{control_center_ldap_user}}"

### Password for authenticated Control Center Health Check. Set if using customized security like Basic Auth.
control_center_health_check_password: "{{control_center_ldap_password}}"
